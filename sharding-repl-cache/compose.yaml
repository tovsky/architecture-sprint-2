services:
  # сервер конфигурации
  configSrv:
    image: dh-mirror.gitverse.ru/mongo:latest
    container_name: mongo_sharding_config_srv
    restart: always
    ports:
      - "27017:27017"
    networks:
      app-network:
        ipv4_address: 173.17.0.11
    volumes:
      - mongo-sharding-config-data:/data/db
    command:
      [
        "--configsvr",      #запуск в режиме конфигурации
        "--replSet",
        "config_server",
        "--bind_ip_all",
        "--port",
        "27017"
      ]
    healthcheck:
      test: [ "CMD", "mongo", "--eval", "db.adminCommand('ping')" ]
      interval: 5s
      start_period: 10s

  # 1-й шард
  shard1-1:
    image: dh-mirror.gitverse.ru/mongo:latest
    container_name: mongo_sharding_shard1_1
    restart: always
    ports:
      - "27018:27018"
    networks:
      app-network:
        ipv4_address: 173.17.0.2
    volumes:
      - mongo-sharding-shard1-1-data:/data/db
    command:
      [
        "--shardsvr",     #запуск в режиме шардинга
        "--replSet",
        "shard1",         #название реплики
        "--bind_ip_all",
        "--port",
        "27018"
      ]
    healthcheck:
      test: [ "CMD", "mongo", "--eval", "db.adminCommand('ping')" ]
      interval: 5s
      start_period: 10s

  shard1-2:
    image: dh-mirror.gitverse.ru/mongo:latest
    container_name: mongo_sharding_shard1_2
    restart: always
    ports:
      - "27021:27021"
    networks:
      app-network:
        ipv4_address: 173.17.0.3
    volumes:
      - mongo-sharding-shard1-2-data:/data/db
    command:
      [
        "--shardsvr",     #запуск в режиме шардинга
        "--replSet",
        "shard1",         #название реплики
        "--bind_ip_all",
        "--port",
        "27021"
      ]
    healthcheck:
      test: [ "CMD", "mongo", "--eval", "db.adminCommand('ping')" ]
      interval: 5s
      start_period: 10s

  shard1-3:
    image: dh-mirror.gitverse.ru/mongo:latest
    container_name: mongo_sharding_shard1_3
    restart: always
    ports:
      - "27022:27022"
    networks:
      app-network:
        ipv4_address: 173.17.0.4
    volumes:
      - mongo-sharding-shard1-3-data:/data/db
    command:
      [
        "--shardsvr",     #запуск в режиме шардинга
        "--replSet",
        "shard1",         #название реплики
        "--bind_ip_all",
        "--port",
        "27022"
      ]
    healthcheck:
      test: [ "CMD", "mongo", "--eval", "db.adminCommand('ping')" ]
      interval: 5s
      start_period: 10s

  shard1-4:
    image: dh-mirror.gitverse.ru/mongo:latest
    container_name: mongo_sharding_shard1_4
    restart: always
    ports:
      - "27023:27023"
    networks:
      app-network:
        ipv4_address: 173.17.0.5
    volumes:
      - mongo-sharding-shard1-4-data:/data/db
    command:
      [
        "--shardsvr",     #запуск в режиме шардинга
        "--replSet",
        "shard1",         #название реплики
        "--bind_ip_all",
        "--port",
        "27023"
      ]
    healthcheck:
      test: [ "CMD", "mongo", "--eval", "db.adminCommand('ping')" ]
      interval: 5s
      start_period: 10s

  # 2-й шард
  shard2-1:
    image: dh-mirror.gitverse.ru/mongo:latest
    container_name: mongo_sharding_shard2_1
    restart: always
    ports:
      - "27019:27019"
    networks:
      app-network:
        ipv4_address: 173.17.0.6
    volumes:
      - mongo-sharding-shard2-1-data:/data/db
    command:
      [
        "--shardsvr",     #запуск в режиме шардинга
        "--replSet",
        "shard2",         #название реплики
        "--bind_ip_all",
        "--port",
        "27019"
      ]
    healthcheck:
      test: [ "CMD", "mongo", "--eval", "db.adminCommand('ping')" ]
      interval: 5s
      start_period: 10s

  shard2-2:
    image: dh-mirror.gitverse.ru/mongo:latest
    container_name: mongo_sharding_shard2_2
    restart: always
    ports:
      - "27024:27024"
    networks:
      app-network:
        ipv4_address: 173.17.0.7
    volumes:
      - mongo-sharding-shard2-2-data:/data/db
    command:
      [
        "--shardsvr",     #запуск в режиме шардинга
        "--replSet",
        "shard2",         #название реплики
        "--bind_ip_all",
        "--port",
        "27024"
      ]
    healthcheck:
      test: [ "CMD", "mongo", "--eval", "db.adminCommand('ping')" ]
      interval: 5s
      start_period: 10s


  shard2-3:
    image: dh-mirror.gitverse.ru/mongo:latest
    container_name: mongo_sharding_shard2_3
    restart: always
    ports:
      - "27025:27025"
    networks:
      app-network:
        ipv4_address: 173.17.0.8
    volumes:
      - mongo-sharding-shard2-3-data:/data/db
    command:
      [
        "--shardsvr",     #запуск в режиме шардинга
        "--replSet",
        "shard2",         #название реплики
        "--bind_ip_all",
        "--port",
        "27025"
      ]
    healthcheck:
      test: [ "CMD", "mongo", "--eval", "db.adminCommand('ping')" ]
      interval: 5s
      start_period: 10s


  shard2-4:
    image: dh-mirror.gitverse.ru/mongo:latest
    container_name: mongo_sharding_shard2_4
    restart: always
    ports:
      - "27026:27026"
    networks:
      app-network:
        ipv4_address: 173.17.0.9
    volumes:
      - mongo-sharding-shard2-4-data:/data/db
    command:
      [
        "--shardsvr",     #запуск в режиме шардинга
        "--replSet",
        "shard2",         #название реплики
        "--bind_ip_all",
        "--port",
        "27026"
      ]
    healthcheck:
      test: [ "CMD", "mongo", "--eval", "db.adminCommand('ping')" ]
      interval: 5s
      start_period: 10s

  # роутер
  mongos_router:
    image: dh-mirror.gitverse.ru/mongo:latest
    container_name: mongo_sharding_mongos_router
    restart: always
    ports:
      - "27020:27020"
    networks:
      app-network:
        ipv4_address: 173.17.0.10
    depends_on:
      - configSrv
    command:
      [
        "mongos",                                         #обычная mongo в режиме роутера
        "--configdb",
        "config_server/mongo_sharding_config_srv:27017",  #передача данных сервера конфигурации
        "--bind_ip_all",
        "--port",
        "27020"
      ]
    healthcheck:
      test: [ "CMD", "mongo", "--eval", "db.adminCommand('ping')" ]
      interval: 5s
      start_period: 10s

  redis:
    image: "redis:latest"
    container_name: redis
    ports:
      - "6379"
    volumes:
      - redis-data:/data
    command: redis-server --appendonly yes
    networks:
      app-network:
        ipv4_address: 173.17.0.13

  pymongo_api:
    container_name: pymongo_api
    build: 
      context: api_app
      dockerfile: Dockerfile
    image: kazhem/pymongo_api:1.0.0
    networks:
      app-network:
        ipv4_address: 173.17.0.12
    depends_on:
      - mongos_router
      - redis
    ports:
      - 8080:8080
    environment:
      MONGODB_URL: "mongodb://mongos_router:27020"
      MONGODB_DATABASE_NAME: "somedb"
      REDIS_URL: "redis://redis:6379"

volumes:
  mongo-sharding-config-data:
  mongo-sharding-shard1-1-data:
  mongo-sharding-shard1-2-data:
  mongo-sharding-shard1-3-data:
  mongo-sharding-shard1-4-data:
  mongo-sharding-shard2-1-data:
  mongo-sharding-shard2-2-data:
  mongo-sharding-shard2-3-data:
  mongo-sharding-shard2-4-data:
  redis-data:

networks:
  app-network:
    driver: bridge
    ipam:
      driver: default
      config:
        - subnet: 173.17.0.0/16
